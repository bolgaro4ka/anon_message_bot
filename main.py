
import os
from datetime import datetime
import logging
import asyncio
from aiogram.filters.command import Command
import g4f
import json
import pyaudio
from vosk import Model, KaldiRecognizer
from pathlib import Path
#from aiogram.dispatcher.dispatcher import Dispatcher
#from aiogram.client.bot import Bot
from aiogram import *
with open('db/users.json', encoding='utf-8') as f:
    users = json.load(f)

with open('db/sends.json', encoding='utf-8') as f:
    sends = json.load(f)

bot = Bot(token="YOUR_TOKEN")
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    print(text)
    return text.split()[1] if len(text.split()) > 1 else None

@dp.message(Command("start"))
async def user_registration(msg: types.Message):
    if not str(msg.from_user.id) in users['users']:
        users['users'][str(msg.from_user.id)] = {"name": msg.from_user.full_name, "username": msg.from_user.username, "msg_by": None}
    if not str(msg.from_user.id) in sends['sends']:
        sends['sends'][str(msg.from_user.id)] = []
    #–í—ã–¥–µ–ª–µ–Ω–∏–µ id —Ä–µ—Ñ–µ—Ä–∞
    unique_code = extract_unique_code(msg.text)
    if unique_code:
        await msg.answer(text="ü™™ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞–π–¥–µ–Ω –≤ —Å—Å—ã–ª–∫–µ!")
        users['users'][str(msg.from_user.id)]["msg_by"] = unique_code

    else:
        await msg.answer(text="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í –≤–∞—à–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ—Ç—É ID\n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /ref <id>\n\n<id> - id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /id")
        users['users'][str(msg.from_user.id)]["msg_by"] = None
    await bot.send_message(msg.from_user.id, f"üéâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/anon_msg_bb_bot?start={msg.from_user.id}")


@dp.message(Command("ref"))
async def time(msg: types.Message):
    try:
        users['users'][str(msg.from_user.id)]["msg_by"] = str(msg.text).split(' ')[1]
        await bot.send_message(msg.from_user.id, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω id –ø–æ–ª—É—á–∞—Ç–µ–ª—è {str(msg.text).split(' ')[1]}")
    except IndexError as e: await bot.send_message(msg.from_user.id, f"üõë –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /ref 12345678")



@dp.message(Command("time"))
async def time(msg: types.Message):
    await bot.send_message(msg.from_user.id, f"‚åõ –í—Ä–µ–º—è: {str(datetime.now())[:]}")


@dp.message(Command("id"))
async def help(msg: types.Message):
    if msg.chat.id:
        await bot.send_message(msg.chat.id, 'ü™™ –í–∞—à ID: ' + str(msg.chat.id)+'\nü™™ ID –ü–æ–ª—É—á–∞—Ç–µ–ª—è: ' + str(msg.chat.id))
    else: await bot.send_message(msg.from_user.id, 'ü™™ –í–∞—à ID: '+str(msg.from_user.id))

@dp.message(Command("off"))
async def help(msg: types.Message):
    with open('db/users.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(users, ensure_ascii=False))
    await bot.send_message(msg.from_user.id, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    with open('db/sends.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(sends, ensure_ascii=False))
    await bot.send_message(msg.from_user.id, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")

@dp.message(Command("message_to"))
async def time(msg: types.Message):
    if users['users'][str(msg.from_user.id)]:
        print(str(msg.text))
        await bot.send_message(int(str(msg.text).split(' ')[1]), ' '.join(str(msg.text).split(' ')[2:]))
        await bot.send_message(msg.from_user.id, ' '.join(str(msg.text).split(' ')[2:])+" –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "+ str(msg.text).split(' ')[1])
    else: await bot.send_message(msg.from_user.id, f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")

@dp.message()
async def echo(msg: types.Message):
    if users['users'][str(msg.from_user.id)]["msg_by"]:
        await bot.send_message(msg.from_user.id, f"‚úÖ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–í–∞—à–µ –∏–º—è —Å–∫—Ä—ã—Ç–æ.")
        await bot.send_message(users['users'][str(msg.from_user.id)]["msg_by"], "üì® –í–∞–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n\n "+msg.text)
        sends['sends'][str(msg.from_user.id)].append(msg.text)
    else:
        await bot.send_message(msg.from_user.id, f"üõë –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /ref <id>\n\n<id> - id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /id")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
