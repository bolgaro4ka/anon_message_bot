import os
from datetime import datetime
import logging
import asyncio
from aiogram.filters.command import Command
import json
import pyaudio
from vosk import Model, KaldiRecognizer
from aiogram import *
from aiogram.types import InputFile
import aiogram.exceptions
import os
from dotenv import load_dotenv


load_dotenv()

SECRET_KEY = os.getenv("TELEGRAM_KEY", "not_so_secret")

with open("db/users.json", encoding="utf-8") as f:
    users = json.load(f)

with open("db/sends.json", encoding="utf-8") as f:
    sends = json.load(f)

bot = Bot(token=SECRET_KEY)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
count = 0


def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    print(text)
    return text.split()[1] if len(text.split()) > 1 else None


@dp.message(Command("start"))
async def user_registration(msg: types.Message):
    current_chat = msg.chat.id

    if not str(current_chat) in users["users"]:
        users["users"][str(current_chat)] = {
            "name": msg.from_user.full_name if not current_chat != abs(current_chat) else msg.chat.full_name,
            "username": msg.from_user.username if current_chat == abs(current_chat) else [f"Bot Adder: {msg.from_user.username}", f"Chat username: {msg.chat.id}"],
            "msg_by": None,
        }
    if not str(current_chat) in sends["sends"]:
        sends["sends"][str(current_chat)] = []
    # –í—ã–¥–µ–ª–µ–Ω–∏–µ id —Ä–µ—Ñ–µ—Ä–∞
    unique_code = extract_unique_code(msg.text)
    if unique_code:
        await msg.answer(text=f"ü™™ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞–π–¥–µ–Ω! –≠—Ç–æ {users['users'][users['users'][str(current_chat)]['msg_by']]['name']}")
        users["users"][str(current_chat)]["msg_by"] = unique_code
    elif users["users"][str(current_chat)]["msg_by"]:
        await msg.answer(text=f"ü™™ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞–π–¥–µ–Ω! –≠—Ç–æ {users['users'][users['users'][str(current_chat)]['msg_by']]['name']}")
    else:
        await msg.answer(text="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í –≤–∞—à–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ—Ç—É ID\n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /ref <id>\n\n<id> - id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /id")
        users["users"][str(current_chat)]["msg_by"] = None
    await bot.send_message(current_chat, f"üéâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/anon_msg_bb_bot?start={current_chat}")


@dp.message(Command("ref"))
async def time(msg: types.Message):
    current_chat = msg.chat.id
    try:
        users["users"][str(current_chat)]["msg_by"] = str(msg.text).split(" ")[1]
        await bot.send_message(current_chat, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω id –ø–æ–ª—É—á–∞—Ç–µ–ª—è {str(msg.text).split(' ')[1]}")
    except IndexError as e:
        await bot.send_message(current_chat, f"üõë –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /ref 12345678")


@dp.message(Command("time"))
async def time(msg: types.Message):
    current_chat = msg.chat.id
    await bot.send_message(current_chat, f"‚åõ –í—Ä–µ–º—è: {str(datetime.now())[:]}")


@dp.message(Command("id"))
async def help(msg: types.Message):
    current_chat = msg.chat.id
    if current_chat != abs(current_chat):
        await bot.send_message(msg.chat.id, "ü™™ –í–∞—à ID: " + str(msg.from_user.id) + "\nü™™ ID –≥—Ä—É–ø–ø—ã: " + str(msg.chat.id) + "\nü™™ ID –ü–æ–ª—É—á–∞—Ç–µ–ª—è: " + str(users["users"][str(current_chat)]["msg_by"]))
    else:
        await bot.send_message(current_chat, "ü™™ –í–∞—à ID: " + str(current_chat) + "\nü™™ ID –ü–æ–ª—É—á–∞—Ç–µ–ª—è: " + str(users["users"][str(current_chat)]["msg_by"]))


@dp.message(Command("off"))
async def help(msg: types.Message):
    current_chat = msg.chat.id
    with open("db/users.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(users, ensure_ascii=False))
    await bot.send_message(current_chat, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    with open("db/sends.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(sends, ensure_ascii=False))
    await bot.send_message(current_chat, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")


@dp.message(Command("message_to"))
async def time(msg: types.Message):
    current_chat = msg.chat.id
    if users["users"][str(current_chat)]:
        print(str(msg.text))
        await bot.send_message(int(str(msg.text).split(" ")[1]), " ".join(str(msg.text).split(" ")[2:]))
        await bot.send_message(current_chat, " ".join(str(msg.text).split(" ")[2:]) + " –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ " + str(msg.text).split(" ")[1])
    else:
        await bot.send_message(current_chat, f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")


@dp.message(Command("message_to_all"))
async def time(msg: types.Message):
    current_chat = msg.chat.id
    if users["users"][str(current_chat)]:
        print(str(msg.text))
        for ids in users["users"].keys():
            try:
                print(ids)
                await bot.send_message(int(ids), " ".join(str(msg.text).split(" ")[1:]))
                await bot.send_message(current_chat, " ".join(str(msg.text).split(" ")[1:]) + " –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ " + ids)
            except:
                continue
    else:
        await bot.send_message(current_chat, f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")


@dp.message()
async def echo(msg: types.Message):
    global count
    current_chat = msg.chat.id
    if msg.content_type == types.ContentType.PHOTO:
        file_id = str(msg.photo[-1].file_id)
        try:
            os.mkdir(f"./db/images/{current_chat}")
        except FileExistsError:
            pass
        file = await bot.get_file(file_id)  # Get file path
        await bot.download_file(file.file_path, f"./db/images/{current_chat}/{str(file_id)[:-20]}.jpg")
        try:
            await bot.send_photo(users["users"][str(current_chat)]["msg_by"], photo=types.FSInputFile(f"./db/images/{current_chat}/{str(file_id)[:-20]}.jpg"), caption="üì® –í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            await bot.send_message(current_chat, f"‚úÖ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {users['users'][users['users'][str(current_chat)]['msg_by']]['name']}.\n–í–∞—à–µ –∏–º—è —Å–∫—Ä—ã—Ç–æ.")

        except aiogram.exceptions.TelegramForbiddenError:
            await bot.send_message(current_chat, f"‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å! –ü–æ—Ö–æ–∂–µ {users['users'][users['users'][str(current_chat)]['msg_by']]['name']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")
        finally:
            if not current_chat != abs(current_chat):
                sends["sends"][str(current_chat)].append([f"AnonIMAGE(./db/images/{current_chat}/{str(file_id)[:-20]}.jpg)", str(users["users"][str(current_chat)]["msg_by"])])
            else:
                sends["sends"][str(current_chat)].append([f"AnonIMAGE(./db/images/{current_chat}/{str(file_id)[:-20]}.jpg)", str(msg.from_user.id), msg.chat.full_name])
    elif users["users"][str(current_chat)]["msg_by"]:

        try:
            await bot.send_message(users["users"][str(current_chat)]["msg_by"], "üì® –í–∞–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n\n " + msg.text)
            await bot.send_message(current_chat, f"‚úÖ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ {users['users'][users['users'][str(current_chat)]['msg_by']]['name']}.\n–í–∞—à–µ –∏–º—è —Å–∫—Ä—ã—Ç–æ.")
        except aiogram.exceptions.TelegramForbiddenError:
            await bot.send_message(current_chat, f"‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å! –ü–æ—Ö–æ–∂–µ {users['users'][users['users'][str(current_chat)]['msg_by']]['name']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")

        except aiogram.exceptions.TelegramBadRequest:
            print("Unk")

        if not current_chat != abs(current_chat):
            sends["sends"][str(current_chat)].append([msg.text, str(users["users"][str(current_chat)]["msg_by"])])
            print("for user")
        else:
            sends["sends"][str(current_chat)].append([msg.text, str(msg.from_user.id), msg.chat.full_name])
            print(f"for group {msg.chat.id}")
    else:
        await bot.send_message(current_chat, f"üõë –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /ref <id>\n\n<id> - id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /id")

    with open("db/users.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(users, ensure_ascii=False))
    print(f'–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): {count}. –¢—Ä–∏–≥–µ—Ä: {users["users"][str(current_chat)]["name"]}, {str(current_chat)}')
    with open("db/sends.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(sends, ensure_ascii=False))
    print(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–π): {count}")
    count += 1


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
